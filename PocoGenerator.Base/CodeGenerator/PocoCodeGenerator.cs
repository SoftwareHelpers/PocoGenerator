// --------------------------------------------------------------------------------------------------------------------
// <copyright file="PocoCodeGenerator.cs" company="Company">
//   Copyrights 2014.
// </copyright>
// <summary>
//   The plain objects code generator.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace PocoGenerator.Base.CodeGenerator
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;

    using EnvDTE;

    using PocoGenerator.Base.Common;
    using PocoGenerator.Base.Models;
    using PocoGenerator.Base.ProjectManager;

    /// <summary>
    /// The plain objects code generator.
    /// </summary>
    public class PocoCodeGenerator : ICodeGenerator
    {
        #region Implementation of ICodeGenerator

        /// <summary>
        /// The code writer.
        /// </summary>
        /// <param name="namespace"> The name space. </param>
        /// <param name="nameofClass"> The name of class. </param>
        /// <param name="fieldDetailses"> The field details. </param>
        /// <returns> The <see cref="string"/>. </returns>
        public string CodeWriter(string @namespace, string nameofClass, IEnumerable<FieldDetails> fieldDetailses)
        {
            using (var stringWriter = new StringWriter(CultureInfo.InvariantCulture))
            {
                using (var writer = new IndentedTextWriter(stringWriter))
                {
                    writer.WriteLine("// <auto-generated />");

                    WriteClassStart(@namespace, nameofClass, writer);
                    foreach (var field in fieldDetailses)
                    {
                        WriteProperty(field.Name, field.TypeName.FullName, writer, field.IsPrimaryKey);
                    }

                    WriteClassEnd(@namespace, writer);
                }

                return stringWriter.ToString();
            }
        }

        /// <summary>
        /// The code writer.
        /// </summary>
        /// <param name="project"> The project. </param>
        /// <param name="nameofClass"> The name of class. </param>
        /// <param name="fieldDetailses"> The field details. </param>
        /// <param name="directoryName"> The directory name. </param>
        /// <returns> The <see cref="bool"/>. </returns>
        public int CodeWriter(Project project, string nameofClass, IEnumerable<FieldDetails> fieldDetailses, string directoryName)
        {
            var rootNamespace = project.GetRootNamespace();
            var code = this.CodeWriter(rootNamespace, nameofClass, fieldDetailses);
            var projectDir = project.GetProjectDir();
            var fullPath = Path.Combine(projectDir, directoryName);
            var classFilePath = Path.Combine(fullPath, string.Format(CultureInfo.InvariantCulture, "{0}.cs", nameofClass));
            File.WriteAllText(classFilePath, code);
            project.ProjectItems.AddFromFile(classFilePath);
            return ResultCode.ResultCode_SuccessfullyGenerated;
        }

        /// <summary>
        /// The write property.
        /// </summary>
        /// <param name="name"> The name. </param>
        /// <param name="value"> The value. </param>
        /// <param name="writer"> The writer. </param>
        /// <param name="isPrimaryKey"> The is primary key. </param>
        private static void WriteProperty(string name, string value, IndentedTextWriter writer, bool isPrimaryKey = false)
        {
            writer.WriteLine();
            if (isPrimaryKey)
            {
                writer.WriteLine("[DataObjectFieldAttribute(true, true, false)]");
            }

            writer.Write("public ");
            writer.Write(value);
            writer.Write(" ");
            writer.WriteLine(name);
            writer.WriteLine("{");
            writer.Indent++;
            writer.Write("get; set;");
            writer.Indent--;
            writer.WriteLine();
            writer.WriteLine("}");
        }

        /// <summary>
        /// Generates a namespace, using statements and class definition.
        /// </summary>
        /// <param name="namespace"> Namespace that code should be generated in.  </param>
        /// <param name="className"> Name of the class that should be generated.  </param>
        /// <param name="writer"> Text writer to add the generated code to.  </param>
        private static void WriteClassStart(string @namespace, string className, IndentedTextWriter writer)
        {
            if (!string.IsNullOrWhiteSpace(@namespace))
            {
                writer.Write("namespace ");
                writer.WriteLine(@namespace);
                writer.WriteLine("{");
                writer.Indent++;
            }

            writer.Write("public ");
            writer.Write("class ");
            writer.Write(className);
            writer.WriteLine("{");
            writer.Indent++;
        }

        /// <summary>
        /// Generates the closing code for a class that was started with WriteClassStart.
        /// </summary>
        /// <param name="namespace"> Namespace that code should be generated in. </param>
        /// <param name="writer"> Text writer to add the generated code to. </param>
        private static void WriteClassEnd(string @namespace, IndentedTextWriter writer)
        {
            writer.Indent--;
            writer.WriteLine("}");

            if (!string.IsNullOrWhiteSpace(@namespace))
            {
                writer.Indent--;
                writer.WriteLine("}");
            }
        }

        #endregion
    }
}
